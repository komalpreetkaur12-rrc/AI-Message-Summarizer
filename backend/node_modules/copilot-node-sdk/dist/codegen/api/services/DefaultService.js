import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
export class DefaultService {
  /**
   * List App Installs
   * This endpoint lists all app installs within the workspace associated with this API Key. <br/><br/>Returns the apps in sorted order as displayed in the left navbar.
   * @returns any 200
   * @throws ApiError
   */
  static listAppInstalls() {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/installs',
    });
  }
  /**
   * Retrieve App Install
   * This API endpoint retrieves a specific App Install.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveAppInstall({ installId }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/installs/{installId}',
      path: {
        installId: installId,
      },
    });
  }
  /**
   * List App Connections
   * This endpoint lists all app connections for the specified manual app install within the workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listAppConnections({ installId, clientId, companyId = '' }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/installs/{installId}/connections',
      path: {
        installId: installId,
      },
      query: {
        clientId: clientId,
        companyId: companyId,
      },
    });
  }
  /**
   * Create App Connection
   * This endpoint creates an app connection for a manual app install. One of <b>companyId</b> or <b>clientIds</b> must be non-null, specifying the client(s)/company who will receive the specified content.
   * @returns any 200
   * @throws ApiError
   */
  static createAppConnection({ installId, requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/installs/{installId}/connections',
      path: {
        installId: installId,
      },
      body: requestBody,
      mediaType: 'application/json',
    });
  }
  /**
   * Create Client
   * This API endpoint creates a client.
   * @returns any 200
   * @throws ApiError
   */
  static createClient({ sendInvite = false, requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/clients',
      query: {
        sendInvite: sendInvite,
      },
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Clients
   * This API endpoint retrieves a list of clients. <br><br>You can use the query params to filter a subset of clients who match specific field values.
   * @returns any 200
   * @throws ApiError
   */
  static listClients({
    companyId = '',
    email,
    givenName,
    familyName,
    nextToken,
    limit = 100,
  }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/clients',
      query: {
        companyId: companyId,
        email: email,
        givenName: givenName,
        familyName: familyName,
        nextToken: nextToken,
        limit: limit,
      },
      errors: {
        403: `403`,
      },
    });
  }
  /**
   * Retrieve Client
   * This API endpoint retrieves a specific client.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveClient({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/clients/{id}',
      path: {
        id: id,
      },
      errors: {
        404: `404`,
      },
    });
  }
  /**
   * Update Client
   * This API endpoint updates a specific client.  <br><br> This PATCH request will only update the fields you specify (including custom fields), leaving the rest as they were. <br><br>Please note that for multi-select (tag) custom fields, all custom field options (tag values) must be included, the PATCH request will not preserve existing custom field options (tags).
   * @returns any 200
   * @throws ApiError
   */
  static updateClient({ id, sendInvite = false, requestBody }) {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/clients/{id}',
      path: {
        id: id,
      },
      query: {
        sendInvite: sendInvite,
      },
      body: requestBody,
      mediaType: 'application/json',
    });
  }
  /**
   * Update a Client (destructive)
   * This API endpoint updates a specific client.<br> <br>This PUT request will perform a destructive update and clear all unspecified field values, including custom fields.
   * @returns any 200
   * @throws ApiError
   */
  static updateAClientDestructive({ id, requestBody }) {
    return __request(OpenAPI, {
      method: 'PUT',
      url: '/v1/clients/{id}',
      path: {
        id: id,
      },
      body: requestBody,
      mediaType: 'application/json',
    });
  }
  /**
   * Delete Client
   * This API endpoint permanently removes a specific client. When a client is deleted, the associated individual file and message channels are also deleted.
   * @returns any 200
   * @throws ApiError
   */
  static deleteClient({ id }) {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/clients/{id}',
      path: {
        id: id,
      },
      errors: {
        404: `404`,
      },
    });
  }
  /**
   * Create Company
   * This API endpoint creates a company.
   * @returns any 200
   * @throws ApiError
   */
  static createCompany({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/companies',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Companies
   * This API endpoint retrieves the list of companies.<br><br>You can use the query params to filter a subset of companies who match specific field values.
   * @returns any 200
   * @throws ApiError
   */
  static listCompanies({ name, isPlaceholder, nextToken, limit = 100 }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/companies',
      query: {
        name: name,
        isPlaceholder: isPlaceholder,
        nextToken: nextToken,
        limit: limit,
      },
      errors: {
        403: `403`,
      },
    });
  }
  /**
   * Retrieve Company
   * This API endpoint retrieves a specific company.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveCompany({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/companies/{id}',
      path: {
        id: id,
      },
      errors: {
        404: `404`,
      },
    });
  }
  /**
   * Update Company
   * This API endpoint updates a specific company.
   * @returns any 200
   * @throws ApiError
   */
  static updateCompany({ id, requestBody }) {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/companies/{id}',
      path: {
        id: id,
      },
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Delete Company
   * This API endpoint permanently removes a specific company. All clients that are part of this company will no longer be associated with any company (and each will instead be associated with a new placeholder company). When a company is deleted, the associated company file and message channels are also deleted.
   * @returns any 200
   * @throws ApiError
   */
  static deleteCompany({ id }) {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/companies/{id}',
      path: {
        id: id,
      },
      errors: {
        404: `404`,
      },
    });
  }
  /**
   * Send Contract
   * This API endpoint sends a contract to the specified recipient.
   * @returns any 200
   * @throws ApiError
   */
  static sendContract({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/contracts',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Contracts
   * This API endpoint retrieves contracts.
   * @returns any 200
   * @throws ApiError
   */
  static listContracts({
    contractTemplateId,
    recipientId = '',
    status,
    clientId = '',
  }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/contracts',
      query: {
        contractTemplateId: contractTemplateId,
        recipientId: recipientId,
        status: status,
        clientId: clientId,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Contract
   * This API endpoint retrieves a specific contract.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveContract({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/contracts/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Contract Template
   * This API endpoint retrieves a specific contract template.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveContractTemplate({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/contract-templates/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Contract Templates
   * This API endpoint retrieves the list of contract templates.  You can use the query params to filter a subset of companies who match specific field values.
   * @returns any 200
   * @throws ApiError
   */
  static listContractTemplates({ name, nextToken, limit = 100 }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/contract-templates',
      query: {
        name: name,
        nextToken: nextToken,
        limit: limit,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Custom Fields
   * This API endpoint retrieves a list of all the custom fields that have been created in your workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listCustomFields() {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/custom-fields',
      errors: {
        404: `404`,
      },
    });
  }
  /**
   * List Custom Field Options
   * Get a list of options for a multi-select custom field.<br><br>You can use the query params to filter for a single matching custom field option.
   * @returns any 200
   * @throws ApiError
   */
  static listCustomFieldOptions({ id, label }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/custom-fields/{id}/options',
      path: {
        id: id,
      },
      query: {
        label: label,
      },
      errors: {
        404: `404`,
      },
    });
  }
  /**
   * Create File
   * These are 3 API endpoints which create a file object in a File Channel, of type `file`, `folder` or `link`, based on the `fileType` path parameter that you specify.
   * @returns any 200
   * @throws ApiError
   */
  static createFile({ fileType, requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/files/{fileType}',
      path: {
        fileType: fileType,
      },
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
        403: `403`,
      },
    });
  }
  /**
   * Retrieve File
   * This endpoint returns the metadata for a specific file object.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveFile({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/files/{id}',
      path: {
        id: id,
      },
      errors: {
        403: `403`,
        404: `404`,
      },
    });
  }
  /**
   * Delete File
   * This API endpoint permanently removes a specific file, folder, or link. <br><br> If the deleted object is a folder, this operation is not recursive and files within the folder will not be deleted. You will receive a ‘Folder is not empty’ error message and the folder will not be deleted.
   * @returns any 200
   * @throws ApiError
   */
  static deleteFile({ id }) {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/files/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Deprecated: Retrieve Download URL of a File
   * This endpoint returns a URL to download the contents of a file (of all sizes).
   * @returns any 200
   * @throws ApiError
   */
  static retrieveDownloadUrlOfAFile({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/files/{id}/download-url',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
        404: `404`,
      },
    });
  }
  /**
   * Deprecated: Download a File
   * This endpoint directly downloads the contents of a file (under 4 MB).
   * @returns any 200
   * @throws ApiError
   */
  static downloadAFile({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/files/{id}/download',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
        500: `500`,
      },
    });
  }
  /**
   * List Files
   * This API endpoint retrieves the list of files in a file channel.
   * @returns any 200
   * @throws ApiError
   */
  static listFiles({ channelId, path, nextToken, limit = 100 }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/files',
      query: {
        channelId: channelId,
        path: path,
        nextToken: nextToken,
        limit: limit,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Deprecated: Create a File
   * This was the initial API endpoint to create a file resource, specifically folders.
   * @returns any 200
   * @throws ApiError
   */
  static createAFileDeprecated({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/file',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
        403: `403`,
        404: `404`,
      },
    });
  }
  /**
   * Create File Channel
   * This API endpoint creates a new file channel. See the File Channel resource for detailed descriptions of the properties.
   * @returns any 200
   * @throws ApiError
   */
  static createFileChannel({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/channels/files',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List File Channels
   * This API endpoint retrieves a list of file channels.<br><br>You can use the query params to filter a subset of the file channels that match the specified field values.
   * @returns any 200
   * @throws ApiError
   */
  static listFileChannels({
    membershipType,
    membershipEntityId = '',
    memberId,
    nextToken,
    limit = 100,
    clientId = '',
    companyId = '',
  }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/channels/files',
      query: {
        membershipType: membershipType,
        membershipEntityId: membershipEntityId,
        memberId: memberId,
        nextToken: nextToken,
        limit: limit,
        clientId: clientId,
        companyId: companyId,
      },
    });
  }
  /**
   * Retrieve File Channel
   * This API endpoint retrieves a specific file channel.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveFileChannel({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/channels/files/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Form
   * This API endpoint retrieves a specific form.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveForm({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/forms/{id}',
      path: {
        id: id,
      },
      errors: {
        404: `404`,
      },
    });
  }
  /**
   * List Forms
   * This API endpoint retrieves a list of forms.
   * @returns any 200
   * @throws ApiError
   */
  static listForms({ nextToken, limit = 100 }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/forms',
      query: {
        nextToken: nextToken,
        limit: limit,
      },
      errors: {
        403: `403`,
      },
    });
  }
  /**
   * Request Form Response
   * This API endpoint sends a form to client(s) for them to complete.
   * @returns any 200
   * @throws ApiError
   */
  static requestFormResponse({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/form-responses',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        403: `403`,
        404: `404`,
      },
    });
  }
  /**
   * List Form Responses
   * This API endpoint retrieves all the responses (Pending & Completed) to a given form.
   * @returns any 200
   * @throws ApiError
   */
  static listFormResponses({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/forms/{id}/form-responses',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Internal User
   * This API endpoint retrieves a specific internal user.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveInternalUser({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/internal-users/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Internal Users
   * This API endpoint retrieves a list of internal users.
   * @returns any 200
   * @throws ApiError
   */
  static listInternalUsers({ nextToken, limit }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/internal-users',
      query: {
        nextToken: nextToken,
        limit: limit,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Invoice
   * @returns any 200
   * @throws ApiError
   */
  static retrieveInvoice({ id = '' }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/invoices/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Invoices
   * @returns any 200
   * @throws ApiError
   */
  static listInvoices({ nextToken, limit }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/invoices',
      query: {
        nextToken: nextToken,
        limit: limit,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Create Invoice
   * This API endpoint create an invoice and automatically assigns it to given recipient to pay
   * @returns any 200
   * @throws ApiError
   */
  static createInvoice({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/invoices',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Invoice Templates
   * This API endpoint lists all the invoice templates for the workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listInvoiceTemplates({ limit, nextToken }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/invoice-templates',
      query: {
        limit: limit,
        nextToken: nextToken,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Send Message
   * This API endpoint sends a message within a Message Channel.
   * @returns any 200
   * @throws ApiError
   */
  static sendMessage({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/messages',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Messages
   * This API endpoint retrieves a list of messages in a given Message Channel. Messages are paginated and returned in descending chronological order.
   * @returns any 200
   * @throws ApiError
   */
  static listMessages({ channelId, nextToken, limit = 100 }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/messages',
      query: {
        channelId: channelId,
        nextToken: nextToken,
        limit: limit,
      },
    });
  }
  /**
   * Create Message Channel
   * This API endpoint creates a new message channel. See the [Message Channel](ref:message-channels) resource for detailed descriptions of the properties.
   * @returns any 200
   * @throws ApiError
   */
  static createMessageChannel({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/message-channels',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Message Channels
   * This API endpoint retrieves a list of message channels in your portal.<br><br>You can use the query params to filter a subset of the message channels that match the specified field values.
   * @returns any 200
   * @throws ApiError
   */
  static listMessageChannels({
    membershipType,
    membershipEntityId,
    memberId,
    nextToken,
    limit = 100,
    clientId = '',
  }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/message-channels',
      query: {
        membershipType: membershipType,
        membershipEntityId: membershipEntityId,
        memberId: memberId,
        nextToken: nextToken,
        limit: limit,
        clientId: clientId,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Message Channel
   * This API endpoint retrieves a specific message channel in your portal.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveMessageChannel({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/message-channels/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Create Note
   * This API endpoint creates a note on a specified client or company in your workspace.
   * @returns any 200
   * @throws ApiError
   */
  static createNote({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/notes',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Notes
   * This API endpoint retrieves a list of notes on clients or companies in your workspace.  <br> You can use the query params to filter a subset of clients or companies that match the specified field values.
   * @returns any 200
   * @throws ApiError
   */
  static listNotes({ entityType, entityId, limit = 20, nextToken }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/notes',
      query: {
        entityType: entityType,
        entityId: entityId,
        limit: limit,
        nextToken: nextToken,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Update Note
   * This API endpoint updates a specific note.  <br> This PATCH request will only update the fields you specify, leaving the rest as they were.
   * @returns any 200
   * @throws ApiError
   */
  static updateNote({ id, requestBody }) {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/notes/{id}',
      path: {
        id: id,
      },
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Note
   * This API endpoint retrieves a specific note.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveNote({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/notes/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Delete Note
   * This API endpoint permanently removes a specific note.
   * @returns any 200
   * @throws ApiError
   */
  static deleteNote({ id }) {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/notes/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Notifications
   * Lists notifications for a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listNotifications({
    recipientId,
    includeRead = false,
    recipientClientId,
    recipientInternalUserId,
  }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/notifications',
      query: {
        recipientId: recipientId,
        includeRead: includeRead,
        recipientClientId: recipientClientId,
        recipientInternalUserId: recipientInternalUserId,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Create Notification
   * Creates a notification in a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static createNotification({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/notifications',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Delete Notification
   * This API endpoint deletes a notification.
   * @returns any 200
   * @throws ApiError
   */
  static deleteNotification({ id }) {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/notifications/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Mark Notification Read
   * This API endpoint marks a notification as read.
   * @returns any 200
   * @throws ApiError
   */
  static markNotificationRead({ id }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/notifications/{id}/read',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Mark Notification Unread
   * This API endpoint marks a notification as unread.
   * @returns any 200
   * @throws ApiError
   */
  static markNotificationUnread({ id }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/notifications/{id}/unread',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Payments
   * This API endpoint lists the payments in a workspace.<br>  Filter can be applied on invoice ID to list a payment for a specific invoice.
   * @returns any 200
   * @throws ApiError
   */
  static listPayments({ invoiceId, limit, nextToken }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/payments',
      query: {
        invoiceId: invoiceId,
        limit: limit,
        nextToken: nextToken,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Prices
   * This API endpoint lists the prices for products in a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listPrices({ productId, nextToken, limit }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/prices',
      query: {
        productId: productId,
        nextToken: nextToken,
        limit: limit,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Price
   * This API endpoint retrieves a specific price.
   * @returns any 200
   * @throws ApiError
   */
  static retrievePrice({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/prices/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Products
   * This API endpoint lists the contracts in a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listProducts({ name, nextToken, limit }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/products',
      query: {
        name: name,
        nextToken: nextToken,
        limit: limit,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Product
   * This API endpoint retrieves a specific product.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveProduct({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/products/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Create Subscription
   * This API endpoint creates a subscription. A subscription is used to bill clients on a recurring basis.
   * @returns any 200
   * @throws ApiError
   */
  static createSubscription({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/subscriptions',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Subscriptions
   * @returns any 200
   * @throws ApiError
   */
  static listSubscriptions({ limit, nextToken }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/subscriptions',
      query: {
        limit: limit,
        nextToken: nextToken,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Subscription
   * This API endpoint retrieves a specific subscription.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveSubscription({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/subscriptions/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Cancel Subscription
   * This API endpoint cancels a subscription with status `active` or `notStarted`
   * @returns any 200
   * @throws ApiError
   */
  static cancelSubscription({ id }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/subscriptions/{id}/cancel',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Subscription Templates
   * @returns any 200
   * @throws ApiError
   */
  static listSubscriptionTemplates({ limit, nextToken }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/subscription-templates',
      query: {
        limit: limit,
        nextToken: nextToken,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Workspace
   * This API endpoint retrieves information about a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveWorkspace() {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/workspaces',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Tasks
   * This API endpoint retrieves tasks in a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveTasks({
    limit = 100,
    nextToken,
    createdBy,
    parentTaskId,
    status,
    clientId,
    internalUserId,
    companyId,
  }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tasks',
      query: {
        limit: limit,
        nextToken: nextToken,
        createdBy: createdBy,
        parentTaskId: parentTaskId,
        status: status,
        clientId: clientId,
        internalUserId: internalUserId,
        companyId: companyId,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Create Task
   * This API endpoint creates a task.
   * @returns any 200
   * @throws ApiError
   */
  static createTask({ requestBody }) {
    return __request(OpenAPI, {
      method: 'POST',
      url: '/v1/tasks',
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Task
   * This API endpoint retrieves a specific task by its id.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveTask({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/tasks/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Update Task
   * This API endpoint updates a task.
   * @returns any 200
   * @throws ApiError
   */
  static updateTask({ id, requestBody }) {
    return __request(OpenAPI, {
      method: 'PATCH',
      url: '/v1/tasks/{id}',
      path: {
        id: id,
      },
      body: requestBody,
      mediaType: 'application/json',
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Delete Task
   * This API endpoint deletes a specific task.
   * @returns any 200
   * @throws ApiError
   */
  static deleteTask({ id }) {
    return __request(OpenAPI, {
      method: 'DELETE',
      url: '/v1/tasks/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * List Task Templates
   * This API endpoint retrieves a list of task templates created in the workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listTaskTemplates({ limit = 100, nextToken }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/task-templates',
      query: {
        limit: limit,
        nextToken: nextToken,
      },
      errors: {
        400: `400`,
      },
    });
  }
  /**
   * Retrieve Task Template
   * This API endpoint retrieves a specific task template by its id.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveTaskTemplate({ id }) {
    return __request(OpenAPI, {
      method: 'GET',
      url: '/v1/task-templates/{id}',
      path: {
        id: id,
      },
      errors: {
        400: `400`,
      },
    });
  }
}
//# sourceMappingURL=DefaultService.js.map
