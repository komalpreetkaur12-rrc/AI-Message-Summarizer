import type { CancelablePromise } from '../core/CancelablePromise';
export declare class DefaultService {
  /**
   * List App Installs
   * This endpoint lists all app installs within the workspace associated with this API Key. <br/><br/>Returns the apps in sorted order as displayed in the left navbar.
   * @returns any 200
   * @throws ApiError
   */
  static listAppInstalls(): CancelablePromise<
    Array<{
      appId?: string;
      displayName?: string;
      id?: string;
      type?: string;
      object?: string;
    }>
  >;
  /**
   * Retrieve App Install
   * This API endpoint retrieves a specific App Install.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveAppInstall({
    installId,
  }: {
    /**
     * The App Install id to retrive
     */
    installId: string;
  }): CancelablePromise<{
    appId?: string;
    displayName?: string;
    id?: string;
    type?: string;
    object?: string;
  }>;
  /**
   * List App Connections
   * This endpoint lists all app connections for the specified manual app install within the workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listAppConnections({
    installId,
    clientId,
    companyId,
  }: {
    installId: string;
    /**
     * If specified, only app connections that are visible to this client will be returned
     */
    clientId?: string;
    /**
     * If specified, only app connections that are associated with this company will be returned
     */
    companyId?: string;
  }): CancelablePromise<
    Array<{
      clientIds?: Array<string>;
      companyId?: any;
      content?: string;
      createdAt?: string;
      id?: string;
      installId?: string;
      membershipType?: string;
      object?: string;
      type?: string;
    }>
  >;
  /**
   * Create App Connection
   * This endpoint creates an app connection for a manual app install. One of <b>companyId</b> or <b>clientIds</b> must be non-null, specifying the client(s)/company who will receive the specified content.
   * @returns any 200
   * @throws ApiError
   */
  static createAppConnection({
    installId,
    requestBody,
  }: {
    /**
     * The manual app install id to connect
     */
    installId: string;
    requestBody?: {
      /**
       * The company ID to create the connection for if creating a company membership type connection. Also required when creating individual or group connections where the specified clients belong to multiple companies
       */
      companyId?: string;
      /**
       * The client users to be included as members of the app connection if creating a group membership type connection. Client users must be part of same company.
       */
      clientIds?: Array<string>;
      /**
       * The type of connection to create, this will affect how clients view the connection within the workspace. One of: `embed` or `link`.
       */
      type: string;
      /**
       * The content that should be seen by the members of the app connection. Can be a public URL or iframe.
       */
      content: string;
    };
  }): CancelablePromise<{
    clientIds?: Array<string>;
    companyId?: any;
    content?: string;
    createdAt?: string;
    id?: string;
    installId?: string;
    membershipType?: string;
    object?: string;
    type?: string;
  }>;
  /**
   * Create Client
   * This API endpoint creates a client.
   * @returns any 200
   * @throws ApiError
   */
  static createClient({
    sendInvite,
    requestBody,
  }: {
    /**
     * If true then send an account invite to the client.
     */
    sendInvite?: boolean;
    requestBody?: {
      /**
       * The client's given name (first name)
       */
      givenName: string;
      /**
       * The client's family name (last name)
       */
      familyName: string;
      /**
       * The client's email
       */
      email: string;
      /**
       * The ID of the company this client belongs to. When no ID is provided, a placeholder company will be created and returned in the response object
       */
      /**
       * @deprecated since v3.15.0 - Use companyIds array instead for multi-company support
       */
      companyId?: string;
      /**
       * The keys are the `key` of the custom field property, and the values are an array of custom field option `key`s (in the  case of multiSelect custom fields), or the direct value in the case of all other types of custom fields.
       */
      customFields?: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    givenName?: string;
    familyName?: string;
    email?: string;
    /**
     * @deprecated
     */
    /**
     * @deprecated since v3.15.0 - Use companyIds array instead for multi-company support
     */
    companyId?: string;
    companyIds?: Array<string>;
    status?: string;
    fallbackColor?: string;
    inviteUrl?: string;
    avatarImageUrl?: string;
    firstLoginDate?: string;
    lastLoginDate?: string;
    customFields?: {
      phoneNumber?: string;
      tags?: Array<string>;
      address?: {
        country?: string;
        region?: string;
        postalCode?: string;
        addressLine1?: string;
        addressLine2?: string;
        city?: string;
        fullAddress?: string;
      };
    };
    creationMethod?: string;
  }>;
  /**
   * List Clients
   * This API endpoint retrieves a list of clients. <br><br>You can use the query params to filter a subset of clients who match specific field values.
   * @returns any 200
   * @throws ApiError
   */
  static listClients({
    companyId,
    email,
    givenName,
    familyName,
    nextToken,
    limit,
  }: {
    /**
     * Any of the company IDs of the client user(s) to query for.
     */
    /**
     * @deprecated since v3.15.0 - Use companyIds array instead for multi-company support
     */
    companyId?: string;
    /**
     * The email of the client user to query for (exact match, case-sensitive).
     */
    email?: string;
    /**
     * The given name of the client user(s) to query for (exact match, case-sensitive).
     */
    givenName?: string;
    /**
     * The family name of the client user(s) to query for (exact match, case-sensitive).
     */
    familyName?: string;
    nextToken?: string;
    limit?: number;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      createdAt?: string;
      givenName?: string;
      familyName?: string;
      email?: string;
      /**
       * @deprecated
       */
      /**
       * @deprecated since v3.15.0 - Use companyIds array instead for multi-company support
       */
      companyId?: string;
      companyIds?: Array<string>;
      status?: string;
      inviteUrl?: string;
      avatarImageUrl?: any;
      firstLoginDate?: any;
      lastLoginDate?: any;
      customFields?: any;
      fallbackColor?: string;
      creationMethod?: string;
    }>;
    nextToken?: string;
  }>;
  /**
   * Retrieve Client
   * This API endpoint retrieves a specific client.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveClient({
    id,
  }: {
    /**
     * The unique ID of the client to retrieve
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    givenName?: string;
    familyName?: string;
    email?: string;
    /**
     * @deprecated
     */
    /**
     * @deprecated since v3.15.0 - Use companyIds array instead for multi-company support
     */
    companyId?: string;
    companyIds?: Array<string>;
    status?: string;
    fallbackColor?: string;
    inviteUrl?: string;
    avatarImageUrl?: string;
    firstLoginDate?: string;
    lastLoginDate?: string;
    customFields?: {
      phoneNumber?: string;
      tags?: Array<string>;
      address?: {
        country?: string;
        region?: string;
        postalCode?: string;
        addressLine1?: string;
        addressLine2?: string;
        city?: string;
        fullAddress?: string;
      };
    };
    creationMethod?: string;
  }>;
  /**
   * Update Client
   * This API endpoint updates a specific client.  <br><br> This PATCH request will only update the fields you specify (including custom fields), leaving the rest as they were. <br><br>Please note that for multi-select (tag) custom fields, all custom field options (tag values) must be included, the PATCH request will not preserve existing custom field options (tags).
   * @returns any 200
   * @throws ApiError
   */
  static updateClient({
    id,
    sendInvite,
    requestBody,
  }: {
    /**
     * The ID of the client to update
     */
    id: string;
    /**
     * Sends an email invitation to the updated client.
     */
    sendInvite?: boolean;
    requestBody?: {
      /**
       * The client's given name.
       */
      givenName?: string;
      /**
       * The client's family name.
       */
      familyName?: string;
      /**
       * The ID of the company to assign this client to. This will replace the current companies that the client is assigned to.
       */
      /**
       * @deprecated since v3.15.0 - Use companyIds array instead for multi-company support
       */
      companyId?: string;
      /**
       * The key is the `key` of the custom field property, and the value is an array of `key`s (in the  case of multiSelect custom fields), or the direct value in the case of all other types of custom fields.
       */
      customFields?: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    givenName?: string;
    familyName?: string;
    email?: string;
    /**
     * @deprecated
     */
    /**
     * @deprecated since v3.15.0 - Use companyIds array instead for multi-company support
     */
    companyId?: string;
    companyIds?: Array<string>;
    status?: string;
    fallbackColor?: string;
    inviteUrl?: string;
    avatarImageUrl?: string;
    firstLoginDate?: string;
    lastLoginDate?: string;
    customFields?: {
      phoneNumber?: string;
      tags?: Array<string>;
      address?: {
        country?: string;
        region?: string;
        postalCode?: string;
        addressLine1?: string;
        addressLine2?: string;
        city?: string;
        fullAddress?: string;
      };
    };
    creationMethod?: string;
  }>;
  /**
   * Update a Client (destructive)
   * This API endpoint updates a specific client.<br> <br>This PUT request will perform a destructive update and clear all unspecified field values, including custom fields.
   * @returns any 200
   * @throws ApiError
   */
  static updateAClientDestructive({
    id,
    requestBody,
  }: {
    /**
     * The ID of the client to update
     */
    id: string;
    requestBody?: {
      /**
       * The client's given name.
       */
      givenName: string;
      /**
       * The client's family name.
       */
      familyName: string;
      /**
       * The ID of the company this client belongs to. If this field is left empty, the client will be **removed** from their existing company.
       */
      /**
       * @deprecated since v3.15.0 - Use companyIds array instead for multi-company support
       */
      companyId?: string;
      /**
       * The key is the `key` of the custom field property, and the value is an array of `key`s (in the  case of multiSelect custom fields), or the direct value in the case of all other types of custom fields.
       */
      customFields?: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    givenName?: string;
    familyName?: string;
    email?: string;
    /**
     * @deprecated
     */
    /**
     * @deprecated since v3.15.0 - Use companyIds array instead for multi-company support
     */
    companyId?: string;
    companyIds?: Array<string>;
    status?: string;
    inviteUrl?: string;
    avatarImageUrl?: string;
    firstLoginDate?: string;
    lastLoginDate?: string;
    customFields?: {
      phoneNumber?: string;
      tags?: Array<string>;
    };
    creationMethod?: string;
  }>;
  /**
   * Delete Client
   * This API endpoint permanently removes a specific client. When a client is deleted, the associated individual file and message channels are also deleted.
   * @returns any 200
   * @throws ApiError
   */
  static deleteClient({
    id,
  }: {
    /**
     * The ID of the client to delete
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    deleted?: boolean;
  }>;
  /**
   * Create Company
   * This API endpoint creates a company.
   * @returns any 200
   * @throws ApiError
   */
  static createCompany({
    requestBody,
  }: {
    requestBody?: {
      /**
       * The company's name
       */
      name: string;
      /**
       * Link (URL) to an image to use as the company's icon. Must be a publicly accessible URL.
       */
      iconImageUrl?: string;
      /**
       * Hexadecimal value (i.e. "#9BBFFF") of the color used to create an icon if an iconImageUrl is not defined on the company
       */
      fallbackColor?: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    name?: string;
    fallbackColor?: string;
    iconImageUrl?: string;
    isPlaceholder?: boolean;
  }>;
  /**
   * List Companies
   * This API endpoint retrieves the list of companies.<br><br>You can use the query params to filter a subset of companies who match specific field values.
   * @returns any 200
   * @throws ApiError
   */
  static listCompanies({
    name,
    isPlaceholder,
    nextToken,
    limit,
  }: {
    /**
     * The name of the company to query for.
     */
    name?: string;
    /**
     * If true, filter for all placeholder companies. If false, filter for all non-placeholder companies. If not provided, return all companies.
     */
    isPlaceholder?: boolean;
    nextToken?: string;
    limit?: number;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      createdAt?: string;
      name?: string;
      fallbackColor?: string;
      iconImageUrl?: string;
      isPlaceholder?: boolean;
    }>;
    nextToken?: string;
  }>;
  /**
   * Retrieve Company
   * This API endpoint retrieves a specific company.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveCompany({
    id,
  }: {
    /**
     * The unique ID of the company to retrieve
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    name?: string;
    fallbackColor?: string;
    iconImageUrl?: string;
    isPlaceholder?: boolean;
  }>;
  /**
   * Update Company
   * This API endpoint updates a specific company.
   * @returns any 200
   * @throws ApiError
   */
  static updateCompany({
    id,
    requestBody,
  }: {
    /**
     * The ID of the company to be updated.
     */
    id: string;
    requestBody?: {
      /**
       * The company’s new name. Note: an existing company name cannot be used.
       */
      name: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    name?: string;
    fallbackColor?: string;
    iconImageUrl?: string;
    isPlaceholder?: boolean;
  }>;
  /**
   * Delete Company
   * This API endpoint permanently removes a specific company. All clients that are part of this company will no longer be associated with any company (and each will instead be associated with a new placeholder company). When a company is deleted, the associated company file and message channels are also deleted.
   * @returns any 200
   * @throws ApiError
   */
  static deleteCompany({
    id,
  }: {
    /**
     * The ID of the company to delete.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    deleted?: boolean;
  }>;
  /**
   * Send Contract
   * This API endpoint sends a contract to the specified recipient.
   * @returns any 200
   * @throws ApiError
   */
  static sendContract({
    requestBody,
  }: {
    requestBody?: {
      /**
       * The unique ID of the contract template the contract is associated with.
       */
      contractTemplateId: string;
      /**
       * Deprecated: Use clientId instead.
       */
      recipientId?: string;
      /**
       * The unique ID of the client receiving the contract request.
       */
      clientId: string;
      /**
       * The company ID of the client. Required when the client has more than one company.
       */
      companyId?: string;
      /**
       * A list of fields which represent the specific values for certain contract inputs. This param is only required if the contract template it is associated with has variable inputs. Example: `{"input_id":"someValue", "other_input_id": "otherValue"}`
       */
      variableValues?: string;
    };
  }): CancelablePromise<{
    contractTemplateId?: string;
    createdAt?: string;
    fields?: Array<{
      id?: string;
      inputType?: string;
      isOptional?: boolean;
      page?: number;
      type?: string;
      value?: string;
    }>;
    fileUrl?: string;
    id?: string;
    name?: string;
    object?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    clientId?: string;
    companyId?: string;
    shareDate?: string;
    signedFileUrl?: string;
    status?: string;
  }>;
  /**
   * List Contracts
   * This API endpoint retrieves contracts.
   * @returns any 200
   * @throws ApiError
   */
  static listContracts({
    contractTemplateId,
    recipientId,
    status,
    clientId,
  }: {
    /**
     * The unique ID of the contract template the contract is associated with.
     */
    contractTemplateId?: string;
    /**
     * Deprecated: Use clientId
     */
    recipientId?: string;
    /**
     * The current state of the contract. Options are pending, signed
     */
    status?: string;
    /**
     * The ID of the client that the contract was sent to.
     */
    clientId?: string;
  }): CancelablePromise<{
    data?: Array<{
      contractTemplateId?: string;
      createdAt?: string;
      fields?: Array<{
        id?: string;
        inputType?: string;
        isOptional?: boolean;
        label?: string;
        page?: number;
        type?: string;
        value?: string;
      }>;
      fileUrl?: string;
      id?: string;
      name?: string;
      object?: string;
      recipientId?: string;
      shareDate?: string;
      signedFileUrl?: string;
      status?: string;
      submissionDate?: string;
    }>;
  }>;
  /**
   * Retrieve Contract
   * This API endpoint retrieves a specific contract.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveContract({
    id,
  }: {
    /**
     * The unique ID of the contract you want to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    contractTemplateId?: string;
    createdAt?: string;
    fields?: Array<{
      id?: string;
      inputType?: string;
      isOptional?: boolean;
      page?: number;
      type?: string;
      value?: string;
    }>;
    fileUrl?: string;
    id?: string;
    name?: string;
    object?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    clientId?: string;
    companyId?: string;
    shareDate?: string;
    signedFileUrl?: string;
    status?: string;
    submissionDate?: string;
  }>;
  /**
   * Retrieve Contract Template
   * This API endpoint retrieves a specific contract template.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveContractTemplate({
    id,
  }: {
    /**
     * The unique ID of the contract template you want to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    createdAt?: string;
    fields?: Array<{
      encodedImgValue?: string;
      id?: string;
      inputType?: string;
      isOptional?: boolean;
      page?: number;
      type?: string;
      value?: string;
    }>;
    id?: string;
    latestSubmissionDate?: string;
    name?: string;
    object?: string;
    requestsCount?: number;
    submissionsCount?: number;
  }>;
  /**
   * List Contract Templates
   * This API endpoint retrieves the list of contract templates.  You can use the query params to filter a subset of companies who match specific field values.
   * @returns any 200
   * @throws ApiError
   */
  static listContractTemplates({
    name,
    nextToken,
    limit,
  }: {
    /**
     * The name of the contract template to query for
     */
    name?: string;
    nextToken?: string;
    limit?: number;
  }): CancelablePromise<{
    data?: Array<{
      createdAt?: string;
      fields?: Array<{
        encodedImgValue?: string;
        id?: string;
        inputType?: string;
        isOptional?: boolean;
        page?: number;
        type?: string;
        value?: string;
      }>;
      id?: string;
      latestSubmissionDate?: string;
      name?: string;
      object?: string;
      requestsCount?: number;
      submissionsCount?: number;
    }>;
  }>;
  /**
   * List Custom Fields
   * This API endpoint retrieves a list of all the custom fields that have been created in your workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listCustomFields(): CancelablePromise<{
    data?: Array<{
      id?: string;
      key?: string;
      name?: string;
      type?: string;
      order?: number;
      object?: string;
    }>;
  }>;
  /**
   * List Custom Field Options
   * Get a list of options for a multi-select custom field.<br><br>You can use the query params to filter for a single matching custom field option.
   * @returns any 200
   * @throws ApiError
   */
  static listCustomFieldOptions({
    id,
    label,
  }: {
    /**
     * The ID of the multi-select custom field to list options for.
     */
    id: string;
    /**
     * Only the option with a label that matches the value provided here will be returned.
     */
    label?: string;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      key?: string;
      label?: string;
      color?: string;
      object?: string;
    }>;
  }>;
  /**
   * Create File
   * These are 3 API endpoints which create a file object in a File Channel, of type `file`, `folder` or `link`, based on the `fileType` path parameter that you specify.
   * @returns any 200
   * @throws ApiError
   */
  static createFile({
    fileType,
    requestBody,
  }: {
    /**
     * The type of file object to be created. This can be 'file', 'folder', or 'link'.
     */
    fileType: string;
    requestBody?: {
      /**
       * The full path where the file object will be created. This should include the filename and extension, if relevant
       */
      path: string;
      /**
       * The File Channel where the file object will be created.
       */
      channelId: string;
      /**
       * The URL that the link points to (only relevant when fileType = link)
       */
      linkUrl?: string;
    };
  }): CancelablePromise<{
    channelId?: string;
    createdAt?: string;
    creatorId?: string;
    downloadUrl?: string;
    id?: string;
    lastModifiedBy?: {
      id?: string;
      object?: string;
    };
    linkUrl?: string;
    name?: string;
    object?: string;
    path?: string;
    size?: number;
    status?: string;
  }>;
  /**
   * Retrieve File
   * This endpoint returns the metadata for a specific file object.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveFile({
    id,
  }: {
    /**
     * ID of the file object
     */
    id: string;
  }): CancelablePromise<{
    channelId?: string;
    createdAt?: string;
    creatorId?: string;
    downloadUrl?: string;
    id?: string;
    lastModifiedBy?: {
      id?: string;
      object?: string;
    };
    linkUrl?: string;
    name?: string;
    object?: string;
    path?: string;
    size?: number;
    status?: string;
  }>;
  /**
   * Delete File
   * This API endpoint permanently removes a specific file, folder, or link. <br><br> If the deleted object is a folder, this operation is not recursive and files within the folder will not be deleted. You will receive a ‘Folder is not empty’ error message and the folder will not be deleted.
   * @returns any 200
   * @throws ApiError
   */
  static deleteFile({
    id,
  }: {
    /**
     * The ID of the file to delete.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    deleted?: boolean;
  }>;
  /**
   * Deprecated: Retrieve Download URL of a File
   * This endpoint returns a URL to download the contents of a file (of all sizes).
   * @returns any 200
   * @throws ApiError
   */
  static retrieveDownloadUrlOfAFile({
    id,
  }: {
    /**
     * ID of the file to download
     */
    id: string;
  }): CancelablePromise<{
    downloadUrl?: string;
  }>;
  /**
   * Deprecated: Download a File
   * This endpoint directly downloads the contents of a file (under 4 MB).
   * @returns any 200
   * @throws ApiError
   */
  static downloadAFile({
    id,
  }: {
    /**
     * ID of the file object to be downloaded
     */
    id: string;
  }): CancelablePromise<any>;
  /**
   * List Files
   * This API endpoint retrieves the list of files in a file channel.
   * @returns any 200
   * @throws ApiError
   */
  static listFiles({
    channelId,
    path,
    nextToken,
    limit,
  }: {
    /**
     * Only return files within the file channel that matches this ID. You can retrieve a file channel ID by calling the List File Channels endpoint.
     */
    channelId: string;
    /**
     * Filters the results based on a folder path prefix. This is a recursive search, files location in subfolders will be returned if they match the path prefix.
     */
    path?: string;
    nextToken?: string;
    limit?: number;
  }): CancelablePromise<{
    data?: Array<{
      channelId?: string;
      createdAt?: string;
      creatorId?: string;
      id?: string;
      linkUrl?: string;
      lastModifiedBy?: {
        id?: string;
        object?: string;
      };
      name?: string;
      object?: string;
      path?: string;
    }>;
    nextToken?: string;
  }>;
  /**
   * Deprecated: Create a File
   * This was the initial API endpoint to create a file resource, specifically folders.
   * @returns any 200
   * @throws ApiError
   */
  static createAFileDeprecated({
    requestBody,
  }: {
    requestBody?: {
      /**
       * The type of object to create. Currently only `folder` is supported.
       */
      type: string;
      /**
       * The id of the channel in which this resource should reside
       */
      channelID: string;
      /**
       * The location in our storage system (S3) where the content of this resource is located. Only relevant when `type` is `folder`
       */
      fileKey?: string;
      /**
       * The relative location from the channel where where this resource should be placed. This is a `/` delimited string where each separated value is an existing folder name. When creating a new folder, the final separated value is the name of the new folder. A path with folders that do not exist is considered invalid input and will return a 400 error.
       */
      path?: string;
      /**
       * If type `link`, the URL associated with this resource
       */
      fileUrl?: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdBy?: string;
    createdAt?: string;
    updatedAt?: string;
    channelId?: string;
    fields?: {
      fileKey?: string;
      fileUrl?: string;
      path?: string;
      starred?: boolean;
    };
  }>;
  /**
   * Create File Channel
   * This API endpoint creates a new file channel. See the File Channel resource for detailed descriptions of the properties.
   * @returns any 200
   * @throws ApiError
   */
  static createFileChannel({
    requestBody,
  }: {
    requestBody?: {
      /**
       * The type of membership that this channel is associated with. Can be one of `individual`, `group` or `company`.
       */
      membershipType: string;
      /**
       * Deprecated: Use clientId and companyId instead.
       */
      membershipEntityId?: string;
      /**
       * The `id`s of the clients to be added to this particular channel. Required for `group` channels. Ignored for `individual` and `company` channels.
       */
      memberIds?: Array<string>;
      /**
       * The `id` of the client this channel is for. Required when membershipType is `individual`.
       */
      clientId?: string;
      /**
       * The `id` of the client this channel belongs to. Required when membershipType is `company` or when member(s) have multiple companies.
       */
      companyId?: string;
    };
  }): CancelablePromise<{
    id?: string;
    createdAt?: string;
    updatedAt?: string;
    membershipType?: string;
    clientId?: string;
    companyId?: string;
    /**
     * @deprecated
     */
    membershipEntityId?: string;
    memberIds?: Array<string>;
  }>;
  /**
   * List File Channels
   * This API endpoint retrieves a list of file channels.<br><br>You can use the query params to filter a subset of the file channels that match the specified field values.
   * @returns any 200
   * @throws ApiError
   */
  static listFileChannels({
    membershipType,
    membershipEntityId,
    memberId,
    nextToken,
    limit,
    clientId,
    companyId,
  }: {
    /**
     * Only return channels that have a membership type matching this value. Can be `individual`, `group` or `company`
     */
    membershipType?: string;
    /**
     * Deprecated: filter using clientId or companyId
     */
    membershipEntityId?: string;
    /**
     * Only return channels that contain the member (client or internal user) matching this ID.
     */
    memberId?: string;
    nextToken?: string;
    limit?: number;
    /**
     * Only return individual channels for this client.
     */
    clientId?: string;
    /**
     * Only return channels that are part of this company
     */
    companyId?: string;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      createdAt?: string;
      updatedAt?: string;
      membershipType?: string;
      clientId?: string;
      companyId?: string;
      /**
       * @deprecated
       */
      membershipEntityId?: string;
      memberIds?: Array<string>;
    }>;
    nextToken?: string;
  }>;
  /**
   * Retrieve File Channel
   * This API endpoint retrieves a specific file channel.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveFileChannel({
    id,
  }: {
    /**
     * The ID of the file channel to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    createdAt?: string;
    updatedAt?: string;
    membershipType?: string;
    clientId?: string;
    companyId?: string;
    /**
     * @deprecated
     */
    membershipEntityId?: string;
    memberIds?: Array<string>;
  }>;
  /**
   * Retrieve Form
   * This API endpoint retrieves a specific form.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveForm({
    id,
  }: {
    /**
     * The unique ID of the form to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    createdAt?: string;
    object?: string;
    name?: string;
    description?: string;
    formFieldIds?: Array<string>;
    formFields?: Array<{
      formFieldId?: string;
      title?: string;
      description?: string;
      type?: string;
      isRequired?: boolean;
    }>;
    allowMultipleSubmissions?: boolean;
    visibility?: string;
    formResponseRequests?: number;
    formResponseSubmissions?: number;
    latestSubmissionDate?: string;
  }>;
  /**
   * List Forms
   * This API endpoint retrieves a list of forms.
   * @returns any 200
   * @throws ApiError
   */
  static listForms({
    nextToken,
    limit,
  }: {
    nextToken?: string;
    limit?: number;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      createdAt?: string;
      object?: string;
      name?: string;
      description?: string;
      formFieldIds?: Array<string>;
      formFields?: Array<{
        formFieldId?: string;
        title?: string;
        description?: string;
        type?: string;
        isRequired?: boolean;
      }>;
      allowMultipleSubmissions?: boolean;
      visibility?: string;
      formResponseRequests?: number;
      formResponseSubmissions?: number;
      latestSubmissionDate?: string;
    }>;
    nextToken?: string;
  }>;
  /**
   * Request Form Response
   * This API endpoint sends a form to client(s) for them to complete.
   * @returns any 200
   * @throws ApiError
   */
  static requestFormResponse({
    requestBody,
  }: {
    requestBody?: {
      /**
       * The ID of the Form to send to the recipient.
       */
      formId: string;
      /**
       * Deprecated. Use clientCompanyIds
       */
      clientIds?: Array<string>;
      /**
       * The list of client and company Ids for which the form is being sent to. E.g. [{ clientId: ‘client_a’, ‘companyId’: ‘company_b’}]
       */
      clientCompanyIds: Array<{
        /**
         * The ID of the client to assign this form to.
         */
        clientId: string;
        /**
         * The ID of the company this form is associated with. One of the companies that the client is part of.
         */
        companyId: string;
      }>;
    };
  }): CancelablePromise<{
    allowMultipleSubmissions?: boolean;
    clientId?: string;
    createdAt?: string;
    formDescription?: string;
    formFieldIds?: Array<string>;
    formFields?: Record<
      string,
      {
        title?: string;
        description?: string;
        type?: string;
        isRequired?: boolean;
      }
    >;
    formId?: string;
    formName?: string;
    id?: string;
    object?: string;
    status?: string;
    visibility?: string;
    companyId?: string;
  }>;
  /**
   * List Form Responses
   * This API endpoint retrieves all the responses (Pending & Completed) to a given form.
   * @returns any 200
   * @throws ApiError
   */
  static listFormResponses({
    id,
  }: {
    /**
     * The ID of the form to retrieve the form responses for.
     */
    id: string;
  }): CancelablePromise<{
    data?: Array<{
      allowMultipleSubmissions?: boolean;
      clientId?: string;
      createdAt?: string;
      formDescription?: string;
      formFieldIds?: Array<string>;
      formFields?: Record<
        string,
        {
          title?: string;
          description?: string;
          type?: string;
          isRequired?: boolean;
          answer?: string;
        }
      >;
      formId?: string;
      formName?: string;
      id?: string;
      object?: string;
      status?: string;
      submissionDate?: string;
      visibility?: string;
    }>;
  }>;
  /**
   * Retrieve Internal User
   * This API endpoint retrieves a specific internal user.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveInternalUser({
    id,
  }: {
    /**
     * The unique ID of the internal user to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    givenName?: string;
    familyName?: string;
    email?: string;
    role?: string;
    fallbackColor?: string;
    isClientAccessLimited?: boolean;
    companyAccessList?: Array<string>;
    avatarImageUrl?: string;
  }>;
  /**
   * List Internal Users
   * This API endpoint retrieves a list of internal users.
   * @returns any 200
   * @throws ApiError
   */
  static listInternalUsers({
    nextToken,
    limit,
  }: {
    nextToken?: string;
    limit?: number;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      createdAt?: string;
      givenName?: string;
      familyName?: string;
      email?: string;
      role?: string;
      fallbackColor?: string;
      isClientAccessLimited?: boolean;
      companyAccessList?: Array<string>;
      avatarImageUrl?: string;
    }>;
    nextToken?: string;
  }>;
  /**
   * Retrieve Invoice
   * @returns any 200
   * @throws ApiError
   */
  static retrieveInvoice({
    id,
  }: {
    /**
     * The unique ID of the invoice you want to retrieve.
     */
    id?: string;
  }): CancelablePromise<{
    collectionMethod?: string;
    createdAt?: string;
    currency?: string;
    dueDate?: string;
    id?: string;
    lineItems?: Array<{
      amount?: number;
      description?: string;
      priceId?: string;
      productId?: string;
      quantity?: number;
    }>;
    memo?: string;
    number?: string;
    object?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    clientId?: string;
    companyId?: string;
    sentDate?: string;
    status?: string;
    taxAmount?: number;
    taxPercentage?: number;
    total?: number;
    receiptNumber?: string;
    receiptUrl?: string;
    fileUrl?: string;
    billingReason?: string;
    paymentMethodPreferences?: Array<{
      type?: string;
      feePaidByClient?: boolean;
    }>;
  }>;
  /**
   * List Invoices
   * @returns any 200
   * @throws ApiError
   */
  static listInvoices({
    nextToken,
    limit,
  }: {
    /**
     * Next token for pagination
     */
    nextToken?: string;
    /**
     * Max number of records to fetch
     */
    limit?: number;
  }): CancelablePromise<{
    data?: Array<{
      collectionMethod?: string;
      createdAt?: string;
      currency?: string;
      dueDate?: string;
      id?: string;
      lineItems?: Array<{
        amount?: number;
        description?: string;
        quantity?: number;
      }>;
      memo?: string;
      number?: string;
      object?: string;
      /**
       * @deprecated
       */
      recipientId?: string;
      clientId?: string;
      companyId?: string;
      sentDate?: string;
      status?: string;
      taxAmount?: number;
      taxPercentage?: number;
      total?: number;
      receiptNumber?: string;
      receiptUrl?: string;
      fileUrl?: string;
      billingReason?: string;
      paymentMethodPreferences?: Array<{
        type?: string;
        feePaidByClient?: boolean;
      }>;
    }>;
  }>;
  /**
   * Create Invoice
   * This API endpoint create an invoice and automatically assigns it to given recipient to pay
   * @returns any 200
   * @throws ApiError
   */
  static createInvoice({
    requestBody,
  }: {
    requestBody?: {
      /**
       * Unique ID of the invoice template to use. If provided, template values will be used for `lineItems`, `memo`, and `taxPercentage`.
       */
      templateId?: string;
      /**
       * Deprecated in favor of clientId and companyId.
       */
      recipientId?: string;
      /**
       * Array of line items. Required if `templateId` is not provided.
       */
      lineItems?: Array<{
        /**
         * Amount in cents. Required if `priceId` not provided
         */
        amount?: number;
        /**
         * Description of the item, ignored if `priceId` is provided.
         */
        description?: string;
        /**
         * Quantity of the item (supports decimals).
         */
        quantity: number;
        /**
         * Unique ID of the `price` object. Required if `amount` is not provided.
         */
        priceId?: string;
      }>;
      /**
       * Memo (arbitrary string) attached to the invoice, often used for display.
       */
      memo?: string;
      /**
       * The number of days from when the invoice is created until it is due. Max value is 30.
       */
      daysUntilDue: number;
      /**
       * Tax percentage to apply to the invoice amount.
       */
      taxPercentage?: number;
      /**
       * Array of preferences which specify which payment methods are allowed and how transaction fees are handled for each payment method
       */
      paymentMethodPreferences: Array<{
        /**
         * Payment method type. Values are `creditCard` or `bankAccount`.
         */
        type: string;
        /**
         * When `true`, the transaction fee is paid by the client, otherwise is covered by your account.
         */
        feePaidByClient: boolean;
      }>;
      /**
       * The ID of the client this invoice is assigned to. Leave empty if assigning to a company.
       */
      clientId?: string;
      /**
       * The ID of the company this invoice is assigned. This is required when an invoice is assigned to a client with more than one company.
       */
      companyId?: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    clientId?: string;
    companyId?: string;
    status?: string;
    memo?: string;
    taxPercentage?: number;
    currency?: string;
    lineItems?: Array<{
      amount?: number;
      description?: string;
      quantity?: number;
    }>;
    total?: number;
    taxAmount?: number;
    dueDate?: string;
    sentDate?: string;
    paymentSuccessDate?: string;
    number?: string;
    paymentMethodPreferences?: Array<{
      type?: string;
      feePaidByClient?: boolean;
    }>;
    fileUrl?: string;
    receiptNumber?: string;
    receiptUrl?: string;
    billingReason?: string;
    createdAt?: string;
  }>;
  /**
   * List Invoice Templates
   * This API endpoint lists all the invoice templates for the workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listInvoiceTemplates({
    limit,
    nextToken,
  }: {
    /**
     * Max number of records to fetch
     */
    limit?: number;
    /**
     * Next token for pagination
     */
    nextToken?: string;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      createdAt?: string;
      updatedAt?: string;
      name?: string;
      memo?: string;
      taxPercentage?: number;
      currency?: string;
      lineItems?: Array<{
        amount?: number;
        description?: string;
        quantity?: number;
      }>;
    }>;
  }>;
  /**
   * Send Message
   * This API endpoint sends a message within a Message Channel.
   * @returns any 200
   * @throws ApiError
   */
  static sendMessage({
    requestBody,
  }: {
    requestBody?: {
      /**
       * The contents of the message. Supports some formatting, see the [Message resource](https://docs.copilot.com/reference/messages) for details.
       */
      text: string;
      /**
       * The Message Channel where the message will be sent.
       */
      channelId: string;
      /**
       * The user (Client or Internal User) to send this message on behalf of. If specified, the sender must be a member of the Message Channel. If not specified, the message will be sent on behalf of the user who generated the API key used in the request.
       */
      senderId?: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    senderId?: string;
    createdAt?: string;
    updatedAt?: string;
    channelId?: string;
    isAttachmentIncluded?: boolean;
    text?: string;
  }>;
  /**
   * List Messages
   * This API endpoint retrieves a list of messages in a given Message Channel. Messages are paginated and returned in descending chronological order.
   * @returns any 200
   * @throws ApiError
   */
  static listMessages({
    channelId,
    nextToken,
    limit,
  }: {
    /**
     * The Message Channel to retrieve messages from.
     */
    channelId: string;
    nextToken?: string;
    limit?: number;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      senderId?: string;
      createdAt?: string;
      updatedAt?: string;
      channelId?: string;
      text?: string;
      isAttachmentIncluded?: boolean;
    }>;
    nextToken?: string;
  }>;
  /**
   * Create Message Channel
   * This API endpoint creates a new message channel. See the [Message Channel](ref:message-channels) resource for detailed descriptions of the properties.
   * @returns any 200
   * @throws ApiError
   */
  static createMessageChannel({
    requestBody,
  }: {
    requestBody?: {
      /**
       * The type of membership that this channel is associated with. Can be one of `individual`, `group` or `company`.
       */
      membershipType: string;
      /**
       * Deprecated. Use clientId and companyId instead.
       */
      membershipEntityId?: string;
      /**
       * The `id`s of the clients to be added to this particular channel. Required for `group` channels. Ignored for `individual` and `company` channels.
       */
      memberIds?: Array<string>;
      /**
       * The id of the client this channel is for. Required for individual channels.
       */
      clientId?: string;
      /**
       * The id of the company this channel belongs to. Required for company channels and when the client(s) members have multiple companies.
       */
      companyId?: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    updatedAt?: string;
    membershipType?: string;
    clientId?: string;
    companyId?: string;
    /**
     * @deprecated
     */
    membershipEntityId?: string;
    memberIds?: Array<string>;
    lastMessageDate?: any;
  }>;
  /**
   * List Message Channels
   * This API endpoint retrieves a list of message channels in your portal.<br><br>You can use the query params to filter a subset of the message channels that match the specified field values.
   * @returns any 200
   * @throws ApiError
   */
  static listMessageChannels({
    membershipType,
    membershipEntityId,
    memberId,
    nextToken,
    limit,
    clientId,
  }: {
    /**
     * Only return channels that have a membership type matching this value. Can be `individual`, `group` or `company`
     */
    membershipType?: string;
    /**
     * Deprecated. Use clientId instead.
     */
    membershipEntityId?: string;
    /**
     * Only return channels that contain the member (client or internal user) matching this ID.
     */
    memberId?: string;
    nextToken?: string;
    limit?: number;
    /**
     * Only return individual channels for this client.
     */
    clientId?: string;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      createdAt?: string;
      updatedAt?: string;
      membershipType?: string;
      clientId?: string;
      companyId?: string;
      /**
       * @deprecated
       */
      membershipEntityId?: string;
      memberIds?: Array<string>;
      lastMessageDate?: any;
    }>;
    nextToken?: string;
  }>;
  /**
   * Retrieve Message Channel
   * This API endpoint retrieves a specific message channel in your portal.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveMessageChannel({
    id,
  }: {
    /**
     * The ID of the message channel to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    updatedAt?: string;
    membershipType?: string;
    clientId?: string;
    companyId?: string;
    /**
     * @deprecated
     */
    membershipEntityId?: string;
    memberIds?: Array<string>;
    lastMessageDate?: any;
  }>;
  /**
   * Create Note
   * This API endpoint creates a note on a specified client or company in your workspace.
   * @returns any 200
   * @throws ApiError
   */
  static createNote({
    requestBody,
  }: {
    requestBody?: {
      /**
       * The type of entity that this note is associated with. Can be one of client or company.
       */
      entityType: string;
      /**
       * The ID of the entity (client or company) that this note is associated with.
       */
      entityId: string;
      /**
       * The note’s title. This field does not support formatting or newlines.
       */
      title: string;
      /**
       * The note’s content. This must be valid HTML.
       */
      content?: string;
    };
  }): CancelablePromise<{
    content?: string;
    createdAt?: string;
    creatorId?: string;
    entityId?: string;
    entityType?: string;
    id?: string;
    object?: string;
    title?: string;
  }>;
  /**
   * List Notes
   * This API endpoint retrieves a list of notes on clients or companies in your workspace.  <br> You can use the query params to filter a subset of clients or companies that match the specified field values.
   * @returns any 200
   * @throws ApiError
   */
  static listNotes({
    entityType,
    entityId,
    limit,
    nextToken,
  }: {
    /**
     * Only return notes that have an entity type matching this value. Can be one of client or company.
     */
    entityType?: string;
    /**
     * Only return notes for the entity (client or company) specified by this ID. If this parameter is included, you must also specify an entity type.
     */
    entityId?: string;
    /**
     * Maximum number of notes to fetch. Default: 20
     */
    limit?: number;
    /**
     * Next token for pagination.
     */
    nextToken?: string;
  }): CancelablePromise<{
    data?: Array<{
      content?: string;
      createdAt?: string;
      creatorId?: string;
      entityId?: string;
      entityType?: string;
      id?: string;
      object?: string;
      title?: string;
    }>;
    nextToken?: string;
  }>;
  /**
   * Update Note
   * This API endpoint updates a specific note.  <br> This PATCH request will only update the fields you specify, leaving the rest as they were.
   * @returns any 200
   * @throws ApiError
   */
  static updateNote({
    id,
    requestBody,
  }: {
    /**
     * The ID of the note to update.
     */
    id: string;
    requestBody?: {
      /**
       * The note’s title. This field does not support formatting or newlines.
       */
      title?: string;
      /**
       * The note’s content. This must be valid HTML.
       */
      content?: string;
    };
  }): CancelablePromise<{
    content?: string;
    createdAt?: string;
    creatorId?: string;
    entityId?: string;
    entityType?: string;
    id?: string;
    object?: string;
    title?: string;
  }>;
  /**
   * Retrieve Note
   * This API endpoint retrieves a specific note.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveNote({
    id,
  }: {
    /**
     * The ID of the note to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    content?: string;
    createdAt?: string;
    creatorId?: string;
    entityId?: string;
    entityType?: string;
    id?: string;
    object?: string;
    title?: string;
  }>;
  /**
   * Delete Note
   * This API endpoint permanently removes a specific note.
   * @returns any 200
   * @throws ApiError
   */
  static deleteNote({
    id,
  }: {
    /**
     * The ID of the note to delete.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    deleted?: boolean;
  }>;
  /**
   * List Notifications
   * Lists notifications for a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listNotifications({
    recipientId,
    includeRead,
    recipientClientId,
    recipientInternalUserId,
  }: {
    /**
     * Deprecated in favor of recipientClientId and recipientInternalUserId
     */
    recipientId?: string;
    /**
     * Includes read notifications.
     */
    includeRead?: boolean;
    /**
     * ID of the client to fetch notifications for.
     */
    recipientClientId?: string;
    /**
     * ID of the client to fetch notifications for.
     */
    recipientInternalUserId?: string;
  }): CancelablePromise<{
    data?: Array<{
      createdAt?: string;
      deliveryTargets?: {
        inProduct?: {
          title?: string;
          isRead?: boolean;
          ctaParams?: {
            foo?: string;
          };
        };
      };
      event?: string;
      id?: string;
      object?: string;
      /**
       * @deprecated
       */
      recipientId?: string;
      recipientClientId?: string;
      recipientCompanyId?: string;
      recipientInternalUserId?: string;
      resourceId?: string;
      senderId?: string;
      senderType?: string;
    }>;
  }>;
  /**
   * Create Notification
   * Creates a notification in a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static createNotification({
    requestBody,
  }: {
    requestBody?: {
      /**
       * ID of the entity sending the notification. This can be ID of client user, internal user, or a company.
       */
      senderId: string;
      /**
       * Deprecated. Use recipientClientId, recipientCompanyId and recipientInternalUserId instead.
       */
      recipientId?: string;
      /**
       * The notification details for each delivery target.
       */
      deliveryTargets?: {
        inProduct?: {
          /**
           * Title of the notification.
           */
          title: string;
          /**
           * Body of the notification.
           */
          body?: string;
          /**
           * Key/value pairs that will be included in the search parameters when clicking on the notification’s call to action in product. This call to action is shown in the Notification Center for internal users.
           */
          ctaParams?: string;
        };
        email?: {
          /**
           * Subject of the email notification.
           */
          subject?: string;
          /**
           * Header of the email notification.
           */
          header?: string;
          /**
           * Body of the email notification.
           */
          body?: string;
          /**
           * Call To Action button title in the email notification.
           */
          title?: string;
          /**
           * Key/value pairs that will be included in the search parameters when clicking on an email notification’s call to action.
           */
          ctaParams?: string;
        };
      };
      /**
       * ID of the client receiving the notification. This required when sending a notification to a client.
       */
      recipientClientId?: string;
      /**
       * ID of the company receiving the notification. This is required when sending a notification to a client that has more than one company.
       */
      recipientCompanyId?: string;
      /**
       * ID of the internal user receiving the notification. This is required when sending a notification to an internal user.
       */
      recipientInternalUserId?: string;
      /**
       * The ID of the company associated with the sender of this notification. This is required when the sender is a client with more than one company.
       */
      senderCompanyId?: string;
    };
  }): CancelablePromise<{
    appId?: string;
    createdAt?: string;
    deliveryTargets?: {
      inProduct?: {
        title?: string;
        body?: string;
        isRead?: boolean;
        ctaParams?: {
          foo?: string;
        };
      };
      email?: {
        subject?: string;
        header?: string;
        body?: string;
        title?: string;
        ctaParams?: {
          foo?: string;
        };
      };
    };
    event?: string;
    id?: string;
    object?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    recipientClientId?: string;
    recipientCompanyId?: string;
    recipientInternalUserId?: string;
    resourceId?: string;
    senderId?: string;
    senderType?: string;
  }>;
  /**
   * Delete Notification
   * This API endpoint deletes a notification.
   * @returns any 200
   * @throws ApiError
   */
  static deleteNotification({
    id,
  }: {
    /**
     * The ID of the notification to delete.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    deleted?: boolean;
  }>;
  /**
   * Mark Notification Read
   * This API endpoint marks a notification as read.
   * @returns any 200
   * @throws ApiError
   */
  static markNotificationRead({
    id,
  }: {
    /**
     * The ID of the notification to mark as read.
     */
    id: string;
  }): CancelablePromise<{
    createdAt?: string;
    deliveryTargets?: {
      inProduct?: {
        title?: string;
        isRead?: boolean;
      };
    };
    event?: string;
    id?: string;
    object?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    recipientClientId?: string;
    recipientCompanyId?: string;
    recipientInternalUserId?: string;
    resourceId?: string;
    senderId?: string;
    senderType?: string;
  }>;
  /**
   * Mark Notification Unread
   * This API endpoint marks a notification as unread.
   * @returns any 200
   * @throws ApiError
   */
  static markNotificationUnread({
    id,
  }: {
    /**
     * The ID of the notification to mark as unread.
     */
    id: string;
  }): CancelablePromise<{
    createdAt?: string;
    deliveryTargets?: {
      inProduct?: {
        title?: string;
        isRead?: boolean;
      };
    };
    event?: string;
    id?: string;
    object?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    recipientClientId?: string;
    recipientCompanyId?: string;
    recipientInternalUserId?: string;
    resourceId?: string;
    senderId?: string;
    senderType?: string;
  }>;
  /**
   * List Payments
   * This API endpoint lists the payments in a workspace.<br>  Filter can be applied on invoice ID to list a payment for a specific invoice.
   * @returns any 200
   * @throws ApiError
   */
  static listPayments({
    invoiceId,
    limit,
    nextToken,
  }: {
    /**
     * Unique ID of invoice
     */
    invoiceId?: string;
    /**
     * Max number of records to fetch
     */
    limit?: string;
    /**
     * Next token for pagination
     */
    nextToken?: string;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      createdAt?: string;
      invoiceId?: string;
      status?: string;
      amount?: number;
      message?: string;
      declineCode?: string;
      paymentMethod?: string;
      last4Digits?: string;
      brand?: string;
      feeAmount?: {
        paidByPlatform?: number;
        paidByClient?: number;
      };
    }>;
  }>;
  /**
   * List Prices
   * This API endpoint lists the prices for products in a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listPrices({
    productId,
    nextToken,
    limit,
  }: {
    /**
     * Unique ID of the product
     */
    productId?: string;
    /**
     * Next token for pagination
     */
    nextToken?: string;
    /**
     * Max number of records to fetch
     */
    limit?: string;
  }): CancelablePromise<{
    data?: Array<{
      amount?: number;
      createdAt?: string;
      currency?: string;
      id?: string;
      interval?: any;
      object?: string;
      productId?: string;
      type?: string;
    }>;
  }>;
  /**
   * Retrieve Price
   * This API endpoint retrieves a specific price.
   * @returns any 200
   * @throws ApiError
   */
  static retrievePrice({
    id,
  }: {
    /**
     * The unique ID of the price you want to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    amount?: number;
    createdAt?: string;
    currency?: string;
    id?: string;
    interval?: string;
    intervalCount?: number;
    object?: string;
    productId?: string;
    type?: string;
  }>;
  /**
   * List Products
   * This API endpoint lists the contracts in a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listProducts({
    name,
    nextToken,
    limit,
  }: {
    /**
     * Name of the product to filter on. Case-insensitive.
     */
    name?: string;
    /**
     * Next token for pagination
     */
    nextToken?: string;
    /**
     * Max number of records to fetch
     */
    limit?: number;
  }): CancelablePromise<{
    data?: Array<{
      createdAt?: string;
      id?: string;
      imageUrls?: any[];
      name?: string;
      object?: string;
      description?: string;
      status?: string;
    }>;
  }>;
  /**
   * Retrieve Product
   * This API endpoint retrieves a specific product.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveProduct({
    id,
  }: {
    /**
     * The unique ID of the product you want to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    createdAt?: string;
    id?: string;
    imageUrls?: Array<string>;
    name?: string;
    object?: string;
    description?: string;
    status?: string;
  }>;
  /**
   * Create Subscription
   * This API endpoint creates a subscription. A subscription is used to bill clients on a recurring basis.
   * @returns any 200
   * @throws ApiError
   */
  static createSubscription({
    requestBody,
  }: {
    requestBody?: {
      /**
       * Unique ID of the invoice template to use. If provided, template values will be used for lineItems, memo, taxPercentage, and currency
       */
      templateId?: string;
      /**
       * Deprecated in favor of clientId and companyId.
       */
      recipientId?: string;
      /**
       * Array of line items. Required if `templateId` is not provided.
       */
      lineItems?: Array<{
        /**
         * Amount in cents. Required if `priceId` not provided
         */
        amount?: number;
        /**
         * Description of the item, ignored if `priceId` is provided.
         */
        description?: string;
        /**
         * Quantity of the item (supports decimals).
         */
        quantity: number;
        /**
         * Unique ID of the `price` object. Required if `amount` is not provided.
         */
        priceId?: string;
      }>;
      /**
       * Arbitrary string attached to the invoice, often used for display
       */
      memo?: string;
      /**
       * The number of days from when the subscription invoice is created until it is due. Max value is 30.
       */
      daysUntilDue: number;
      /**
       * Tax percentage to apply to the invoice amount
       */
      taxPercentage?: number;
      /**
       * Billing frequency. Required if line items don't include a recurring price. Values: `day`, `week`, `month`, `quarterly`, `yearly`
       */
      interval?: string;
      /**
       * Number of intervals between billings. Default value = 1
       */
      intervalCount?: number;
      /**
       * Array of preferences which specify which payment methods are allowed and how transaction fees are handled for each payment method
       */
      paymentMethodPreferences: Array<{
        /**
         * Payment method type. Values are `creditCard` or `bankAccount`.
         */
        type: string;
        /**
         * When `true`, the transaction fee is paid by the client, otherwise is covered by your account.
         */
        feePaidByClient: boolean;
      }>;
      /**
       * Specify how to charge for an invoice values: `sendInvoice` , `chargeAutomatically`
       */
      collectionMethod: string;
      /**
       * The ID of the client this subscription is assigned to. Leave empty if assigning to a company.
       */
      clientId?: string;
      /**
       * The ID of the company this subscription is assigned to. This is required when assigning to a client with more than one company.
       */
      companyId?: string;
    };
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    collectionMethod?: string;
    status?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    clientId?: string;
    companyId?: string;
    memo?: string;
    taxPercentage?: number;
    currency?: string;
    interval?: string;
    intervalCount?: number;
    daysUntilDue?: number;
    canceledAt?: string;
    paymentMethodPreferences?: Array<{
      type?: string;
      feePaidByClient?: boolean;
    }>;
    lineItems?: Array<{
      priceId?: string;
      productId?: string;
      description?: string;
      quantity?: number;
    }>;
  }>;
  /**
   * List Subscriptions
   * @returns any 200
   * @throws ApiError
   */
  static listSubscriptions({
    limit,
    nextToken,
  }: {
    /**
     * Max number of records to fetch
     */
    limit?: string;
    /**
     * Next token for pagination
     */
    nextToken?: string;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      createdAt?: string;
      collectionMethod?: string;
      status?: string;
      /**
       * @deprecated
       */
      recipientId?: string;
      clientId?: string;
      companyId?: string;
      memo?: string;
      taxPercentage?: number;
      currency?: string;
      interval?: string;
      intervalCount?: number;
      daysUntilDue?: number;
      canceledAt?: string;
      paymentPreferences?: {
        allowedPaymentMethodTypes?: Array<string>;
        absorbTransactionFee?: Array<{
          type?: string;
          feePaidByClient?: boolean;
        }>;
      };
      lineItems?: Array<{
        priceId?: string;
        productId?: string;
        description?: string;
        quantity?: number;
      }>;
    }>;
  }>;
  /**
   * Retrieve Subscription
   * This API endpoint retrieves a specific subscription.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveSubscription({
    id,
  }: {
    /**
     * The unique ID of the subscription you want to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    collectionMethod?: string;
    status?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    clientId?: string;
    companyId?: string;
    memo?: string;
    taxPercentage?: number;
    currency?: string;
    interval?: string;
    intervalCount?: number;
    daysUntilDue?: number;
    canceledAt?: string;
    paymentPreferences?: {
      allowedPaymentMethodTypes?: Array<string>;
      absorbTransactionFee?: Array<{
        type?: string;
        feePaidByClient?: boolean;
      }>;
    };
    lineItems?: Array<{
      priceId?: string;
      productId?: string;
      description?: string;
      quantity?: number;
    }>;
  }>;
  /**
   * Cancel Subscription
   * This API endpoint cancels a subscription with status `active` or `notStarted`
   * @returns any 200
   * @throws ApiError
   */
  static cancelSubscription({
    id,
  }: {
    /**
     * Unique ID of the subscription to cancel.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    createdAt?: string;
    collectionMethod?: string;
    status?: string;
    /**
     * @deprecated
     */
    recipientId?: string;
    clientId?: string;
    companyId?: string;
    memo?: string;
    taxPercentage?: number;
    currency?: string;
    interval?: string;
    intervalCount?: number;
    daysUntilDue?: number;
    canceledAt?: string;
    paymentPreferences?: {
      allowedPaymentMethodTypes?: Array<string>;
      absorbTransactionFee?: Array<{
        type?: string;
        feePaidByClient?: boolean;
      }>;
    };
    lineItems?: Array<{
      priceId?: string;
      productId?: string;
      description?: string;
      quantity?: number;
    }>;
  }>;
  /**
   * List Subscription Templates
   * @returns any 200
   * @throws ApiError
   */
  static listSubscriptionTemplates({
    limit,
    nextToken,
  }: {
    /**
     * Max number of records to fetch
     */
    limit?: number;
    /**
     * Next token for pagination
     */
    nextToken?: string;
  }): CancelablePromise<{
    data?: Array<{
      id?: string;
      object?: string;
      createdAt?: string;
      updatedAt?: string;
      name?: string;
      memo?: string;
      taxPercentage?: number;
      currency?: string;
      interval?: string;
      intervalCount?: number;
      lineItems?: Array<{
        amount?: number;
        description?: string;
        quantity?: number;
      }>;
    }>;
  }>;
  /**
   * Retrieve Workspace
   * This API endpoint retrieves information about a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveWorkspace(): CancelablePromise<{
    id?: string;
    industry?: string;
    isCompaniesEnabled?: boolean;
    isClientDirectSignUpEnabled?: boolean;
    logOutUrl?: string;
    brandName?: string;
    squareIconUrl?: string;
    fullLogoUrl?: string;
    squareLoginImageUrl?: string;
    socialSharingImageUrl?: string;
    colorSidebarBackground?: string;
    colorSidebarText?: string;
    colorAccent?: string;
    font?: string;
    metaTitle?: string;
    metaDescription?: string;
    portalUrl?: string;
  }>;
  /**
   * List Tasks
   * This API endpoint retrieves tasks in a workspace.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveTasks({
    limit,
    nextToken,
    createdBy,
    parentTaskId,
    status,
    clientId,
    internalUserId,
    companyId,
  }: {
    /**
     * Max number of records to fetch.
     */
    limit?: number;
    /**
     * Next token for pagination.
     */
    nextToken?: string;
    /**
     * The creator of the tasks in order to filter the list response.
     */
    createdBy?: string;
    /**
     * The parent task id.
     */
    parentTaskId?: string;
    /**
     * The status of the tasks in order to filter the list response, one of todo/inProgress/completed.
     */
    status?: string;
    /**
     * the recipient client id
     */
    clientId?: string;
    /**
     * the recipient internal user id
     */
    internalUserId?: string;
    /**
     * the recipient company id
     */
    companyId?: string;
  }): CancelablePromise<{
    data?: Array<{
      archivedBy?: any;
      archivedDate?: any;
      clientId?: string;
      companyId?: string;
      internalUserId?: any;
      completedBy?: any;
      completedByUserType?: any;
      completedDate?: any;
      createdBy?: string;
      createdDate?: string;
      creatorType?: string;
      deletedBy?: any;
      deletedDate?: any;
      description?: string;
      dueDate?: any;
      id?: string;
      isArchived?: boolean;
      isDeleted?: boolean;
      label?: string;
      name?: string;
      object?: string;
      parentTaskId?: any;
      source?: string;
      status?: string;
      templateId?: any;
    }>;
    nextToken?: string;
  }>;
  /**
   * Create Task
   * This API endpoint creates a task.
   * @returns any 200
   * @throws ApiError
   */
  static createTask({
    requestBody,
  }: {
    requestBody?: {
      /**
       * The name of the task.
       */
      name?: string;
      /**
       * The description of the task.
       */
      description?: string;
      /**
       * The parent task of the task, if task should be a subtask.
       */
      parentTaskId?: string;
      /**
       * The status of the task, one of todo/inProgress/completed.
       */
      status?: string;
      /**
       * The uuid of the internal user assigned to this task.
       */
      internalUserId?: string;
      /**
       * The uuid of the client user assigned to this task. Company ID field is required if this field is used.
       */
      clientId?: string;
      /**
       * The uuid of the company assigned to this task. If assigning to a client user, this field is required as well.
       */
      companyId?: string;
      /**
       * The date the task is due, in RFC3339 format.
       */
      dueDate?: string;
      /**
       * ID of the template to use when creating this task
       */
      templateId?: string;
    };
  }): CancelablePromise<{
    archivedBy?: any;
    archivedDate?: any;
    clientId?: string;
    companyId?: string;
    completedBy?: any;
    completedByUserType?: any;
    completedDate?: any;
    createdBy?: string;
    createdDate?: string;
    creatorType?: string;
    deletedBy?: any;
    deletedDate?: any;
    description?: string;
    dueDate?: any;
    id?: string;
    isArchived?: boolean;
    isDeleted?: boolean;
    label?: string;
    name?: string;
    object?: string;
    parentTaskId?: string;
    source?: string;
    status?: string;
    templateId?: any;
  }>;
  /**
   * Retrieve Task
   * This API endpoint retrieves a specific task by its id.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveTask({
    id,
  }: {
    /**
     * The id of the task to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    archivedBy?: any;
    archivedDate?: any;
    clientId?: string;
    companyId?: string;
    completedBy?: any;
    completedByUserType?: any;
    completedDate?: any;
    createdBy?: string;
    createdDate?: string;
    creatorType?: string;
    deletedBy?: any;
    deletedDate?: any;
    description?: string;
    dueDate?: any;
    id?: string;
    isArchived?: boolean;
    isDeleted?: boolean;
    label?: string;
    name?: string;
    object?: string;
    parentTaskId?: string;
    source?: string;
    status?: string;
    templateId?: string;
  }>;
  /**
   * Update Task
   * This API endpoint updates a task.
   * @returns any 200
   * @throws ApiError
   */
  static updateTask({
    id,
    requestBody,
  }: {
    /**
     * The id of the task to update.
     */
    id: string;
    requestBody?: {
      /**
       * The name of the task.
       */
      name?: string;
      /**
       * The description of the task.
       */
      description?: string;
      /**
       * The status of the task.
       */
      status?: string;
      /**
       * The uuid of the internal user assigned to this task.
       */
      internalUserId?: string;
      /**
       * The uuid of the client user assigned to this task.
       */
      clientId?: string;
      /**
       * The uuid of the company assigned to this task. If assigning to a client user field should be required as well.
       */
      companyId?: string;
      /**
       * The date the task is due, in RFC3339 format.
       */
      dueDate?: string;
      /**
       * Whether to archive the task or not.
       */
      isArchived?: boolean;
    };
  }): CancelablePromise<{
    archivedBy?: any;
    archivedDate?: any;
    clientId?: string;
    companyId?: string;
    completedBy?: any;
    completedByUserType?: any;
    completedDate?: any;
    createdBy?: string;
    createdDate?: string;
    creatorType?: string;
    deletedBy?: any;
    deletedDate?: any;
    description?: string;
    dueDate?: any;
    id?: string;
    isArchived?: boolean;
    isDeleted?: boolean;
    label?: string;
    name?: string;
    object?: string;
    parentTaskId?: string;
    source?: string;
    status?: string;
    templateId?: any;
  }>;
  /**
   * Delete Task
   * This API endpoint deletes a specific task.
   * @returns any 200
   * @throws ApiError
   */
  static deleteTask({
    id,
  }: {
    /**
     * The id of the task to delete.
     */
    id: string;
  }): CancelablePromise<{
    id?: string;
    object?: string;
    deleted?: boolean;
  }>;
  /**
   * List Task Templates
   * This API endpoint retrieves a list of task templates created in the workspace.
   * @returns any 200
   * @throws ApiError
   */
  static listTaskTemplates({
    limit,
    nextToken,
  }: {
    /**
     * Max number of records to fetch.
     */
    limit?: number;
    /**
     * Next token for pagination.
     */
    nextToken?: string;
  }): CancelablePromise<any>;
  /**
   * Retrieve Task Template
   * This API endpoint retrieves a specific task template by its id.
   * @returns any 200
   * @throws ApiError
   */
  static retrieveTaskTemplate({
    id,
  }: {
    /**
     * The id of the task template to retrieve.
     */
    id: string;
  }): CancelablePromise<{
    createdDate?: string;
    description?: string;
    id?: string;
    name?: string;
    object?: string;
  }>;
}
